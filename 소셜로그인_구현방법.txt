Flask와 Supabase를 연결하여 사용하는 것은 매우 유용한 방법입니다. Supabase는 PostgreSQL 데이터베이스를 백엔드로 제공하며, 실시간 데이터베이스와 인증, 스토리지 등 다양한 기능을 제공합니다. Flask는 경량 웹 프레임워크로, Supabase와 함께 사용하면 백엔드와 프론트엔드 간의 상호작용을 쉽게 관리할 수 있습니다.

### 예제 프로젝트: Flask와 Supabase를 연동하여 사용자 인증 구현

#### 1. 프로젝트 구조 설정
```
my_flask_app/
│
├── app.py
├── config.py
├── templates/
│   ├── login.html
│   └── signup.html
└── venv/ (optional, if you are using a virtual environment)
```

#### 2. Flask와 Supabase 설치
터미널에서 다음 명령어를 실행하여 필요한 패키지를 설치합니다:
```bash
pip install Flask supabase
```

#### 3. Supabase 프로젝트 설정
1. [Supabase](https://supabase.io/)에 회원가입 후 프로젝트를 생성합니다.
2. 프로젝트의 URL과 API 키를 기록해둡니다.

#### 4. `config.py` 파일 생성
Supabase 설정을 관리할 `config.py` 파일을 생성합니다.

```python
import os

SUPABASE_URL = os.getenv('SUPABASE_URL', 'your-supabase-url')
SUPABASE_KEY = os.getenv('SUPABASE_KEY', 'your-supabase-key')
```

#### 5. `app.py` 파일 생성
Flask 애플리케이션과 Supabase 클라이언트를 초기화하는 `app.py` 파일을 생성합니다.

```python
from flask import Flask, render_template, request, redirect, url_for, session
from supabase import create_client, Client
import config

app = Flask(__name__)
app.secret_key = 'your_secret_key'

# Supabase 클라이언트 생성
supabase: Client = create_client(config.SUPABASE_URL, config.SUPABASE_KEY)

@app.route('/')
def index():
    if 'user' in session:
        return f"Hello, {session['user']['email']}!"
    return render_template('login.html')

@app.route('/signup', methods=['GET', 'POST'])
def signup():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        response = supabase.auth.sign_up(email=email, password=password)
        if response.get('error'):
            return f"Error: {response['error']['message']}"
        return redirect(url_for('index'))
    return render_template('signup.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        response = supabase.auth.sign_in(email=email, password=password)
        if response.get('error'):
            return f"Error: {response['error']['message']}"
        session['user'] = response['user']
        return redirect(url_for('index'))
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.pop('user', None)
    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(debug=True)
```

#### 6. 템플릿 파일 생성
`templates` 폴더에 `login.html`과 `signup.html` 파일을 생성합니다.

#### templates/login.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
</head>
<body>
    <h1>Login</h1>
    <form action="{{ url_for('login') }}" method="post">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required><br>
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required><br>
        <button type="submit">Login</button>
    </form>
    <p><a href="{{ url_for('signup') }}">Sign up</a></p>
</body>
</html>
```

#### templates/signup.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign Up</title>
</head>
<body>
    <h1>Sign Up</h1>
    <form action="{{ url_for('signup') }}" method="post">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required><br>
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required><br>
        <button type="submit">Sign Up</button>
    </form>
    <p><a href="{{ url_for('login') }}">Login</a></p>
</body>
</html>
```

#### 7. 실행 및 테스트
터미널에서 Flask 애플리케이션을 실행합니다:
```bash
python app.py
```

브라우저에서 `http://127.0.0.1:5000/`로 접속하여 회원가입 및 로그인을 테스트합니다.

### 요약
- Flask와 Supabase를 사용하여 사용자 인증 시스템 구현
- Supabase 클라이언트를 생성하여 회원가입, 로그인, 로그아웃 기능 구현
- HTML 템플릿을 사용하여 사용자 인터페이스 구성
