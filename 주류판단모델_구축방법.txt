위의 설명은 안드로이드 스튜디오 기반 앱에서 사진을 찍고 플라스크 서버로 이미지를 전송한 후, 해당 이미지에서 병을 감지하고 병에 적힌 텍스트를 통해 주류 여부를 판단하는 전체적인 프로세스를 다루고 있습니다. 이를 실제로 구현하기 위해 단계별로 상세히 설명해드리겠습니다.

### 1. 안드로이드 스튜디오에서 사진 촬영 및 서버로 이미지 전송

#### 안드로이드 스튜디오 설정

1. 카메라 권한 설정:
   `AndroidManifest.xml` 파일에 카메라 권한을 추가합니다.
   
   <uses-permission android:name="android.permission.CAMERA" />
   <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
   

2. 카메라 인텐트 사용:
   사진을 찍고 서버로 전송하는 코드를 작성합니다.
   
   public class MainActivity extends AppCompatActivity {
       static final int REQUEST_IMAGE_CAPTURE = 1;
       String currentPhotoPath;

       @Override
       protected void onCreate(Bundle savedInstanceState) {
           super.onCreate(savedInstanceState);
           setContentView(R.layout.activity_main);
           dispatchTakePictureIntent();
       }

       private void dispatchTakePictureIntent() {
           Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
           if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
               File photoFile = null;
               try {
                   photoFile = createImageFile();
               } catch (IOException ex) {
                   // Error occurred while creating the File
               }
               if (photoFile != null) {
                   Uri photoURI = FileProvider.getUriForFile(this, "com.example.android.fileprovider", photoFile);
                   takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                   startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);
               }
           }
       }

       private File createImageFile() throws IOException {
           String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
           String imageFileName = "JPEG_" + timeStamp + "_";
           File storageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES);
           File image = File.createTempFile(imageFileName, ".jpg", storageDir);
           currentPhotoPath = image.getAbsolutePath();
           return image;
       }

       @Override
       protected void onActivityResult(int requestCode, int resultCode, Intent data) {
           super.onActivityResult(requestCode, resultCode, data);
           if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK) {
               uploadImage();
           }
       }

       private void uploadImage() {
           File file = new File(currentPhotoPath);
           RequestBody requestFile = RequestBody.create(MediaType.parse("image/jpeg"), file);
           MultipartBody.Part body = MultipartBody.Part.createFormData("file", file.getName(), requestFile);
           Retrofit retrofit = new Retrofit.Builder()
                   .baseUrl("http://your_flask_server_ip:5000/")
                   .addConverterFactory(GsonConverterFactory.create())
                   .build();

           UploadService service = retrofit.create(UploadService.class);
           Call<ResponseBody> call = service.uploadImage(body);
           call.enqueue(new Callback<ResponseBody>() {
               @Override
               public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                   if (response.isSuccessful()) {
                       // 성공 처리
                   } else {
                       // 실패 처리
                   }
               }

               @Override
               public void onFailure(Call<ResponseBody> call, Throwable t) {
                   // 실패 처리
               }
           });
       }
   }
   

   Retrofit 인터페이스:
   
   public interface UploadService {
       @Multipart
       @POST("/detect")
       Call<ResponseBody> uploadImage(@Part MultipartBody.Part file);
   }
   

### 2. Flask 서버 설정

위의 Flask 서버 설정 예시를 사용하면 됩니다. 예를 들어, 다음과 같이 `app.py` 파일을 작성합니다.

from flask import Flask, request, jsonify
import os
import torch
from PIL import Image
import pytesseract

app = Flask(__name__)

# YOLOv5 모델 로드
model = torch.hub.load('ultralytics/yolov5', 'yolov5s')

def detect_bottle(image_path):
    results = model(image_path)
    results.save()
    return results

def extract_text(image_path):
    text = pytesseract.image_to_string(Image.open(image_path))
    return text

@app.route('/detect', methods=['POST'])
def detect():
    if 'file' not in request.files:
        return jsonify({"error": "No file part"}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "No selected file"}), 400
    if file:
        image_path = os.path.join('uploads', file.filename)
        file.save(image_path)
        
        results = detect_bottle(image_path)
        if not results:
            return jsonify({"is_alcohol": False})

        text = extract_text(image_path)
        alcohol_keywords = ['맥주', '와인', '소주', '위스키', '술'] # 주류 관련 키워드 예시 (주류 이름이 저장되어 있는 데이터셋을 가져와야됨)
        if any(keyword in text for keyword in alcohol_keywords):
            return jsonify({"is_alcohol": True})
        else:
            return jsonify({"is_alcohol": False})

if __name__ == '__main__':
    if not os.path.exists('uploads'):
        os.makedirs('uploads')
    app.run(debug=True)


### 3. YOLOv5 및 Tesseract 설치

YOLOv5와 Tesseract를 설치하고 필요한 라이브러리를 설치하는 코드를 실행합니다.

!git clone https://github.com/ultralytics/yolov5
%cd yolov5
!pip install -r requirements.txt

!apt-get install tesseract-ocr
!pip install pytesseract


### 4. 결과 확인

이제 안드로이드 앱에서 사진을 찍고 서버로 전송하면, 서버에서는 이미지에서 병을 감지하고 텍스트를 추출하여 주류 여부를 판단하는 전체 프로세스를 수행하게 됩니다.

이러한 방식으로 안드로이드 앱과 Flask 서버를 연동하여 이미지 분석 및 텍스트 추출 기능을 구현할 수 있습니다.